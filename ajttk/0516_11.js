//1번
let a = 789;
console.log("안녕하세요! 저는 ${a} 숫자를 좋아합니다.");
console.log(`안녕하세요! 저는 ${a} 숫자를 좋아합니다.`);
//위의 콘솔은 ""안의 문자가 그대로 출력되었고, 아래의 콘솔은 ${}안의 a가 변수로써 출력되었다.
//``벡틱을 쓰면 ${}안을 변수로 인식한다.


//2번
const A = 8;
let b = 80;
while(b >= 3) {
console.log(--b);
console.log(++A); //에러. const는 고정값이라서 값을 변경할 수 없다. let은 재할당 가능.
}


//3번
//변수명의 첫 글자는 영문자, 달러($), 언더 바(_)만 올 수 있다.
//두번째 이후 글자는 영문자, 달러($), 언더 바(_)와 숫자만 올 수 있다.
//변수명의 영문자는 대문자와 소문자를 엄격하게 구분한다.
//자바스크립트의 예약어가 아니어야 한다.


//4번
//4-1 Object를 활용하는 방식 2가지를 서술하시오. -> [""] 방식과 . 을 이용한 방식.

//4-2 
/*
A == B 와 A === B 의 의미를 서술하고,
A != B 와 A !== B 의 의미를 서술하시오.

->정답
==는 a == b 라고 할때, a와 b의 값이 같은지를 비교해서, 같으면 true, 다르면 false라고 한다.값만 같으면 true이다.

===는 Strict. 즉 엄격한 Equal Operator로써 "엄격하게" 같음을 비교할 때 사용하는 연산자이다. 
===는 a === b 라고 할때, 값과 값의 종류(Data Type)가 모두 같은지를 비교해서 같으면 true 다르면 false라고 한다.
*/

//4-3
/* 
<link> 로 연결된 CSS 파일
head 요소 내의 style 요소
브라우저 디폴트 스타일시트
<link> 로 연결된 CSS 파일 내의 @import 문
head 요소 내의 style 요소 내의 @import 문

다음을 css 상속 우선순위가 높은 순으로 배열하시오. 

->정답
중요도 : CSS가 어디에 선언 되었는지에 따라서 우선순위가 달라진다.
명시도 : 대상을 명확하게 특정할수록 명시도가 높아지고 우선순위가 높아진다.

head 요소 내의 style 요소
head 요소 내의 style 요소 내의 @import 문
<link> 로 연결된 CSS 파일
<link> 로 연결된 CSS 파일 내의 @import 문
브라우저 디폴트 스타일시트
순으로 우선순위가 높다.
*/


//5번
//undifind는 변수를 선언하고 값을 할당하지 않은 상태이고, null은 변수를 선언하고 빈 값을 할당한 상태이다.
//undifind는 자료형자체가 없다.


/* 
 -> 수정
둘 다 원시값 중 하나로 undifind는 선언한 후에 값을 할당하지 않은 변수나 값이 주어지지 않은 인수에 자동으로 할당되고,
null는 어떤 값이 의도적으로 비어있음을 나타낸다
*/
